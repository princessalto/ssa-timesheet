{"version":3,"sources":["jquery-sidebarToggler.js","jquery-sidebarDropdown.js","jquery-repeater.js","jquery-slugify.js","jquery-lockables.js","utilities.js"],"names":[],"mappingsxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzhEA;AACA;AACA","file":"app.js","sourcesContent":["/**\r\n * jquery-sidebarToggler.js\r\n *\r\n * @param  {[type]} $        [description]\r\n * @param  {[type]} document [description]\r\n * @return {[type]}          [description]\r\n */\r\n(function ($, document) {\r\n    var Toggler = {\r\n        init: function (options, elem) {\r\n            var self = this;\r\n            self.elem = elem;\r\n            self.$elem = $(elem);\r\n            self.sidebar = (typeof options === 'string') ? options : $.fn.sidebarToggler.options.sidebar;\r\n            self.options = $.extend( {}, $.fn.sidebarToggler.options, options );\r\n            // console.log(self);\r\n\r\n            self.loadState();\r\n            self.toggle();\r\n        },\r\n\r\n        toggle: function () {\r\n            var self = this;\r\n            self.$elem.on('click', function (e) {\r\n                $(self.sidebar).toggleClass(self.options.sidebarToggledClass);\r\n                self.saveState();\r\n                e.preventDefault();\r\n            });\r\n        },\r\n\r\n        saveState: function () {\r\n            var self = this;\r\n            localStorage.setItem(self.options.localStorageName, $(self.sidebar).hasClass(self.options.sidebarToggledClass) ? 1 : 0);\r\n        },\r\n\r\n        loadState: function () {\r\n            var self = this;\r\n            if( localStorage.getItem(self.options.localStorageName) == 1 ) {\r\n                $(self.options.sidebar).addClass(self.options.sidebarToggledClass);\r\n            } else {\r\n                $(self.options.sidebar).removeClass(self.options.sidebarToggledClass);\r\n            }\r\n        },\r\n    }\r\n\r\n    $.fn.sidebarToggler = function (options) {\r\n        var toggler = Object.create( Toggler );\r\n        return this.each(function () {\r\n            toggler.init(options, this);\r\n        });\r\n    }\r\n\r\n    $.fn.sidebarToggler.options = {\r\n        sidebar: \"[data-toggle=sidebar]\",\r\n        sidebarToggledClass: \"toggled\",\r\n        localStorageName: 'sidebarTogglerState',\r\n    }\r\n\r\n    jQuery('[data-toggle=sidebar-toggler]').sidebarToggler();\r\n\r\n})(jQuery, document);\r\n","\r\n(function ($) {\r\n    var Dropdown = {\r\n        init: function (options, elem) {\r\n            var self = this;\r\n            self.elem = elem;\r\n            self.$elem = $(elem);\r\n            self.options = $.extend( {}, $.fn.sidebarDropdown.options, options );\r\n            self.$parent = self.$elem.parents( self.options.parent );\r\n            self.$dropdownMenu = self.$parent.find(self.options.dropdownMenu);\r\n\r\n            console.log(self.$dropdownMenu.attr('id'));\r\n            self.toggle();\r\n        },\r\n\r\n        open: function () {\r\n            var self = this;\r\n            self.$parent.addClass( self.options.openClass );\r\n\r\n            self.$dropdownMenu.hide().slideDown({\r\n                duration: self.options.animation.durationIn,\r\n                easing: self.options.animation.easeIn,\r\n            });\r\n            self.$elem.attr(\"aria-expanded\", \"true\");\r\n        },\r\n\r\n        close: function () {\r\n            var self = this;\r\n\r\n            self.$dropdownMenu.slideUp({\r\n                duration: self.options.animation.durationOut,\r\n                easing: self.options.animation.easeOut,\r\n            }).removeAttr(\"style\");\r\n            self.$elem.attr(\"aria-expanded\", \"false\");\r\n\r\n            setTimeout(function () {\r\n                self.$parent.removeClass( self.options.openClass );\r\n            }, self.options.animation.duration);\r\n        },\r\n\r\n        toggle: function () {\r\n            var self = this;\r\n\r\n            if( !$(this).parents(self.options.sidebar).hasClass('toggled') ) {\r\n\r\n                if( self.$parent.hasClass( self.options.openClass ) ) {\r\n                    self.close();\r\n                } else {\r\n                    self.open();\r\n                }\r\n\r\n            } else {\r\n                // Means the Sidebar is in a toggled state\r\n                // In this case let CSS handle dropdown\r\n            }\r\n\r\n        },\r\n\r\n    }\r\n\r\n    $.fn.sidebarDropdown = function (options, elem) {\r\n        var dropdown = Object.create(Dropdown);\r\n        return this.each(function (e) {\r\n            $(this).on('click', function (e) {\r\n                dropdown.init(options, this);\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }).on('hover', function (e) {\r\n                e.preventDefault();\r\n            });\r\n        });\r\n    };\r\n\r\n    $.fn.sidebarDropdown.options = {\r\n        sidebar: '[data-toggle=sidebar]',\r\n        parent: '.dropdown',\r\n        openClass: 'open',\r\n        animation: 'slideDown',\r\n        dropdownMenu: '.dropdown-menu',\r\n        animation: {\r\n            durationIn: 400,\r\n            durationOut: 100,\r\n            duration: 100,\r\n            easeIn: 'easeInOutCirc',\r\n            easeOut: 'easeOutBounce',\r\n        }\r\n    };\r\n    jQuery('[data-toggle=sidebar-dropdown]').sidebarDropdown();\r\n})(jQuery);","/**\n * HTML Repeater\n *\n * @param  {Object} $\n * @param  {Object} document\n * @return\n */\n(function ($, document) {\n\n\tvar Repeater = {\n        init: function (options, elem) {\n        \tvar self = this;\n            self.elem = elem;\n            self.$elem = $(elem);\n            self.options = $.extend( {}, $.fn.repeater.options, options );\n            self.$container = $(elem).parents(self.options.repeatableContainer);\n            self.$repeatable = self.$container.find(self.options.repeatable);\n\n            self.$closeButtonContainer = self.$container.find(self.options.closeButtonContainer);\n\n            this.debug(\"[Repeater]: initialized on click\");\n\n            return false;\n        },\n\n        toggle: function (options) {\n            var self = this,\n                index = self.$repeatable.length;\n                $clone = self.$repeatable.last().clone();\n\n            self.options.beforeToggle($clone, index, self);\n\n            $clone.find('input, select').val('');\n            $clone.find('textarea').text('');\n            // $clone.find('input[name=\"attr['+(index - 1)+'][key]\"], select[name=\"attr['+(index - 1)+'][key]\"]').attr('name', 'attr['+index+'][key]');\n            $clone.find(self.options.closeButtonContainer).removeClass('hidden-xs-up').show();\n\n            self.$repeatable.last().after($clone);\n            $clone.find(self.options.focusableElement).focus();\n\n            self.options.afterToggle($clone, index, self);\n\n            return false;\n        },\n\n        destroy: function () {\n        \tthis.destroy();\n        \tthis.element.unbind( this.eventNamespace )\n\t\t    this.bindings.unbind( this.eventNamespace );\n        },\n\n        remove: function (callback) {\n            var self = this;\n            callback(self);\n            return true;\n        },\n\n        debug: function ($d) {\n            var self = this;\n        \tif (self.options.debug) console.log($d);\n        },\n    };\n\n    $.fn.repeater = function (options) {\n        var repeater = Object.create(Repeater);\n\n        return this.each(function () {\n            $(this).click(function (e) {\n                repeater.init(options, this);\n                repeater.toggle(options);\n                repeater.remove(function (self) {\n                    $(document).on(\"click\", self.options.closeButton, function (e) {\n                        $(this).parents(self.options.repeatable).remove();\n                    });\n                    return true;\n                });\n            });\n        });\n    };\n\n    $.fn.repeater.options = {\n        repeatableContainer: '.repeatable-block',\n        repeatable: '.repeatable',\n        closeButtonContainer: '.repeatable-close-button',\n        closeButton: '.btn-close',\n        focusableElement: 'input:first',\n        buttons: {\n            add: {\n                class: 'btn btn-link btn-secondary pull-xs-right',\n                icon: 'fa fa-plus',\n                text: '',\n            },\n            remove: {\n                class: 'btn btn-link btn-secondary pull-xs-right',\n                icon: 'fa fa-minus',\n                text: '',\n            },\n        },\n        debug: true,\n\n        beforeToggle: function (clone, index, self) {},\n        afterToggle: function (clone, index, self) {},\n    };\n    $('[data-toggle=repeater]').repeater();\n\n})(jQuery, document);","/**\n * Slugify\n *\n * @param  {Object} $\n * @param  {Object} document\n * @return\n */\n(function ($, document) {\n\n\tvar Slugify = {\n        init: function (options, elem) {\n        \tvar self = this;\n            self.elem = elem;\n            self.$elem = $(elem);\n            self.options = $.extend( {}, $.fn.slugify.options, options );\n            if (self.$elem.data('slugify')) self.options.target = self.$elem.data('slugify');\n            if (self.$elem.data('slugify-separator')) self.options.separator = self.$elem.data('slugify-separator');\n\n\n            self.$elem.on('keyup', function (e) {\n\t            var $string = $(this).val();\n\t            $string = self.convert($string);\n\t            $(self.options.target).val($string);\n\n\t            if (self.options.debug) self.debug($string);\n            });\n\n        \treturn true;\n        },\n\n        convert: function ($string) {\n        \treturn $string.toLowerCase()\n        \t\t\t.replace(/ /g, this.options.separator)\n        \t\t\t.replace(/[^\\w-]+/g, '');\n        },\n\n        destroy: function () {\n        \tthis.destroy();\n        \tthis.element.unbind( this.eventNamespace )\n\t\t    this.bindings.unbind( this.eventNamespace );\n        },\n\n        debug: function ($string) {\n        \tconsole.log($string);\n        },\n    };\n\n    $.fn.slugify = function (options, elem) {\n        var slugify = Object.create(Slugify);\n        return this.each(function () {\n            slugify.init(options, this);\n        });\n    };\n\n    $.fn.slugify.options = {\n        target: '[name=slug]',\n        separator: '-',\n        debug: false,\n    };\n    jQuery('[data-slugify]').slugify();\n\n})(jQuery, document);","/**\n * Lockable\n *\n * @param  {Object} $\n * @param  {Object} document\n * @return\n */\n(function ($, document) {\n\n\tvar Lockable = {\n        init: function (options, elem) {\n        \tvar self = this;\n            self.elem = elem;\n            self.$elem = $(elem);\n            self.options = $.extend( {}, $.fn.lockable.options, options );\n            self.options.target = '' == self.options.target ? self.$elem.data('target') : '.lockable-target';\n\n            self.toggle(self.options, self);\n\n        \treturn true;\n        },\n\n        toggle: function (options, elem) {\n            var self = this;\n\n            console.log(options.target);\n            if (true == $(options.target).prop('disabled')) {\n                $(options.target).prop('disabled', false);\n                console.log('false');\n            } else {\n                $(options.target).prop('disabled', true);\n                console.log('true');\n            }\n\n            if (options.debug) self.debug(options.target);\n        },\n\n        destroy: function () {\n        \tthis.destroy();\n        \tthis.element.unbind( this.eventNamespace )\n\t\t    this.bindings.unbind( this.eventNamespace );\n        },\n\n        debug: function ($d) {\n        \tconsole.log($d);\n        },\n    };\n\n    $.fn.lockable = function (options, elem) {\n        var lockable = Object.create(Lockable);\n        return this.each(function () {\n            $(this).on('click', function (e) {\n                lockable.init(options, this);\n                // lockable.toggle(options, this);\n            });\n        });\n    };\n\n    $.fn.lockable.options = {\n        target: '',\n        debug: false,\n    };\n    $('[data-toggle=lockable]').lockable();\n\n})(jQuery, document);","jQuery(document).ready(function (e) {\n\tif ($.fn.validation) $('form[data-jquery-validate], .jquery-validate').validate();\n});"],"sourceRoot":"/source/"}